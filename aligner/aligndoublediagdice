#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
import itertools
import copy

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

def _constant_factory(value):
    return lambda: value
	
	
	

sys.stderr.write("Training with Dice's coefficient...")
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")
sys.stderr.write("\n")

dice = defaultdict(int)
diceCoef = defaultdict(float)
for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
	dice[(f_i,e_j)] = (2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j]))
	
	
p2 =copy.copy(dice)# defaultdict(_constant_factory(1.0/len(keys)))
p = copy.copy(dice)# defaultdict(_constant_factory(1.0/len(keys)))

keys = set()
for (n, (f, e)) in enumerate(bitext):
	for (i, f_i) in enumerate(set(f)):
		for (j, e_j) in enumerate(set(e)):
			keys.add((f_i, e_j))

for (f, e) in keys:
	p2[(e, f)] += 1.0/len(keys)
	p[(f, e)] += 1.0/len(keys)
iters = 0
while iters < 40:
	sys.stderr.write(str(iters))
	count = defaultdict(float)
	e_count = defaultdict(float)
	
	count2 = defaultdict(float)
	e_count2 = defaultdict(float)
	
	for (n, (f, e)) in enumerate(bitext):
		for (i, f_i) in enumerate(set(f)):
			z = 0
			for (j, e_j) in enumerate(set(e)):
				z += p[(f_i, e_j)]
				
			for (j, e_j) in enumerate(set(e)):
				if (abs(i - j) < 5 or True):
					c = p[(f_i, e_j)] / z
					count[(f_i, e_j)] += c
					e_count[e_j] += c
				
		for (i, e_i) in enumerate(set(e)):
			z = 0
			for (j, f_j) in enumerate(set(f)):
				z += p2[(e_i, f_j)]
				
			for (j, f_j) in enumerate(set(f)):
				if (abs(i - j) < 5 or True):
					c = p2[(e_i, f_j)] / z
					count2[(e_i, f_j)] += c
					e_count2[f_j] += c
		if n % 1000 == 0:
			sys.stderr.write(".")

	for (k, (f_i, e_j)) in enumerate(count.keys()):
		p[(f_i,e_j)] = float(count[(f_i, e_j)]) / e_count[e_j] 
		if k % 120000 == 0:
			sys.stderr.write("-")
	for (k, (e_i, f_j)) in enumerate(count2.keys()):
		p2[(e_i, f_j)] = float(count2[(e_i, f_j)]) / e_count2[f_j]
		if k % 120000 == 0:
			sys.stderr.write("-")
	sys.stderr.write("\n")
	iters += 1


for (n, (f, e)) in enumerate(bitext):
		for (i, f_i) in enumerate(f):
			bestp = 0
			bestj = 0
			for (j, e_j) in enumerate(e):
				#sys.stderr.write(str((2.0/(abs(i-j) + 1) + 1)) + " ")
				#if p[(f_i, e_j)] * p2[(e_j, f_i)] * (1/(abs(i-j) / 8 + 1)) > bestp:
				if p[(f_i, e_j)] * p2[(e_j, f_i)] * (1/(abs(i-j) / 8 + 1)) > bestp:
					bestp = p[(f_i, e_j)] * p2[(e_j, f_i)]
					bestj = j
			sys.stdout.write("%i-%i " % (i,bestj))
		sys.stdout.write("\n")