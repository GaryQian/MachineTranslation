#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
import itertools
import copy
import random

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

def _constant_factory(value):
    return lambda: value
keys = set()
for (n, (f, e)) in enumerate(bitext):
	for (i, f_i) in enumerate(set(f)):
		for (j, e_j) in enumerate(set(e)):
			keys.add((f_i, e_j))
maxiters = 20
t = defaultdict(_constant_factory(1.0/len(keys)))#0.00001))
q = defaultdict(_constant_factory(1.0/len(keys)))#0.00001))
iters = 0
while iters < maxiters:
	sys.stderr.write(str(iters))
	count = defaultdict(float)
	counte = defaultdict(float)
	countlp = defaultdict(float)
	countl = defaultdict(float)
	
	#E
	for k, (fs, es) in enumerate(bitext):
		l = len(es)
		m = len(fs)
		if k % 500 == 0: sys.stderr.write(".")
		for (i,f) in enumerate(fs):
			prod = []
			for (j, e) in enumerate(es):
				prod.append(q[(j, i, l, m)] * t[(f, e)])
			z = float(sum(prod))
			for (j, e) in enumerate(es):
				delta = prod[j] / z
			
				count[(f, e)] += delta
				counte[(e,)] += delta
				countlp[(j, i, l, m)] += delta
				countl[(i, l, m)] += delta

				
    #M
	t = defaultdict(float, {k: w / counte[k[1:]] for k, w in count.iteritems() if w > 0.0})
	q = defaultdict(float, {k: w / countl[k[1:]] for k, w in countlp.iteritems() if w > 0.0})
	sys.stderr.write("\n")
	
	iters += 1
	
t2 = defaultdict(_constant_factory(1.0/len(keys)))#0.00001))
q2 = defaultdict(_constant_factory(1.0/len(keys)))#0.00001))
iters = 0
while iters < maxiters:
	sys.stderr.write(str(iters))
	count = defaultdict(float)
	counte = defaultdict(float)
	countlp = defaultdict(float)
	countl = defaultdict(float)
	
	#E
	for k, (es, fs) in enumerate(bitext):
		l = len(es)
		m = len(fs)
		if k % 500 == 0: sys.stderr.write(".")
		for (i,f) in enumerate(fs):
			prod = []
			for (j, e) in enumerate(es):
				prod.append(q2[(j, i, l, m)] * t2[(f, e)])
			z = float(sum(prod))
			for (j, e) in enumerate(es):
				delta = prod[j] / z
			
				count[(f, e)] += delta
				counte[(e,)] += delta
				countlp[(j, i, l, m)] += delta
				countl[(i, l, m)] += delta

				
    #M
	t2 = defaultdict(float, {k: w / counte[k[1:]] for k, w in count.iteritems() if w > 0.0})
	q2 = defaultdict(float, {k: w / countl[k[1:]] for k, w in countlp.iteritems() if w > 0.0})
	sys.stderr.write("\n")
	
	iters += 1


#Find best
for (n, (fs, es)) in enumerate(bitext):
		l = len(es)
		m = len(fs)
		for (i, f) in enumerate(fs):
			bestp = 0
			bestj = 0
			for (j, e) in enumerate(es):
				# * (1/(abs(i-j) / 8 + 1))
				val = (t[(f, e)] * q[(j, i, l, m)]) * (t2[(e, f)] * q2[(i, j, m, l)]) * (1/(abs(i-j) / 8 + 1))
				if val > bestp:
					bestp = val
					bestj = j
			sys.stdout.write("%i-%i " % (i,bestj))
		sys.stdout.write("\n")